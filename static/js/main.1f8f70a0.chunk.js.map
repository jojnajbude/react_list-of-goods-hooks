{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReverse","NONE","sortBy","chooseSort","className","type","classNames","ALPABET","onClick","LENGTH","current","goods","sortType","visibleGoods","sort","good1","good2","localeCompare","length","reverse","getReorderedGoods","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAoBKA,E,0EAbQC,EAAyB,CACpC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA6BF,mBAASH,EAASM,MAA/C,mBAAOC,EAAP,KAAeC,EAAf,KA4BA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYJ,IAAWP,EAASY,UAGpCC,QAAS,kBAAML,EAAWR,EAASY,UATrC,iCAcA,wBACEF,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,WAAYJ,IAAWP,EAASc,SAGpCD,QAAS,kBAAML,EAAWR,EAASc,SATrC,4BAcA,wBACEJ,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,YAAaP,IAGjBS,QAAS,kBAAMR,GAAW,SAAAU,GAAO,OAAKA,MATxC,sBAcEX,GAAcG,IAAWP,EAASM,OAEhC,wBACEI,KAAK,SACLD,UAAU,4BACVI,QA5EE,WACZR,GAAW,GACXG,EAAWR,EAASM,OAuEZ,sBAUN,6BA9EsB,SAACU,EAAcC,GACvC,IAAMC,EAAY,YAAOF,GAiBzB,OAfAE,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQJ,GACN,KAAKjB,EAASY,QACZ,OAAOQ,EAAME,cAAcD,GAC7B,KAAKrB,EAASc,OACZ,OAAOM,EAAMG,OAASF,EAAME,OAC9B,QACE,OAAO,MAITnB,GACFc,EAAaM,UAGRN,EA6DFO,CAAkBxB,EAAiBM,GACjCmB,KAAI,SAAAC,GAAI,OACP,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCjHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1f8f70a0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\ntype Goods = string[];\n\nexport const goodsFromServer: Goods = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortBy, chooseSort] = useState(SortType.NONE);\n\n  const reset = () => {\n    setReverse(false);\n    chooseSort(SortType.NONE);\n  };\n\n  const getReorderedGoods = (goods: Goods, sortType: SortType) => {\n    const visibleGoods = [...goods];\n\n    visibleGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.ALPABET:\n          return good1.localeCompare(good2);\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n\n    if (isReversed) {\n      visibleGoods.reverse();\n    }\n\n    return visibleGoods;\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            {\n              'is-light': sortBy !== SortType.ALPABET,\n            },\n          )}\n          onClick={() => chooseSort(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            {\n              'is-light': sortBy !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => chooseSort(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setReverse(current => !current)}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortBy !== SortType.NONE)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {getReorderedGoods(goodsFromServer, sortBy)\n          .map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}